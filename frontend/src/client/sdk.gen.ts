// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ChatChatCompletionData,
  ChatChatCompletionResponse,
  ChatChatStreamData,
  ChatChatStreamResponse,
  CodeBlocksCreateNewCodeBlockData,
  CodeBlocksCreateNewCodeBlockResponse,
  CodeBlocksDeleteExistingCodeBlockData,
  CodeBlocksDeleteExistingCodeBlockResponse,
  CodeBlocksReadCodeBlockData,
  CodeBlocksReadCodeBlockResponse,
  CodeBlocksReadCodeBlocksData,
  CodeBlocksReadCodeBlocksResponse,
  CodeBlocksReadConversationCodeBlocksData,
  CodeBlocksReadConversationCodeBlocksResponse,
  CodeBlocksSearchUserCodeBlocksData,
  CodeBlocksSearchUserCodeBlocksResponse,
  CodeBlocksUpdateExistingCodeBlockData,
  CodeBlocksUpdateExistingCodeBlockResponse,
  ConversationsCreateNewConversationData,
  ConversationsCreateNewConversationResponse,
  ConversationsDeleteExistingConversationData,
  ConversationsDeleteExistingConversationResponse,
  ConversationsReadConversationData,
  ConversationsReadConversationResponse,
  ConversationsReadConversationsData,
  ConversationsReadConversationsResponse,
  ConversationsUpdateExistingConversationData,
  ConversationsUpdateExistingConversationResponse,
  FilesDeleteUploadedFileData,
  FilesDeleteUploadedFileResponse,
  FilesReadFileContentData,
  FilesReadFileContentResponse,
  FilesReadFileData,
  FilesReadFileResponse,
  FilesReadFilesData,
  FilesReadFilesResponse,
  FilesUploadFileData,
  FilesUploadFileResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginTestTokenResponse,
  MessagesCreateNewMessageData,
  MessagesCreateNewMessageResponse,
  MessagesDeleteExistingMessageData,
  MessagesDeleteExistingMessageResponse,
  MessagesReadMessagesData,
  MessagesReadMessagesResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  SettingsDeleteApiKeyData,
  SettingsDeleteApiKeyResponse,
  SettingsGetApiKeysStatusResponse,
  SettingsGetApiUsageResponse,
  SettingsSetApiKeyData,
  SettingsSetApiKeyResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserMeResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsHealthCheckResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
} from "./types.gen"

export class ChatService {
  /**
   * Chat Completion
   * Create a chat completion (non-streaming).
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ChatResponse Successful Response
   * @throws ApiError
   */
  public static chatCompletion(
    data: ChatChatCompletionData,
  ): CancelablePromise<ChatChatCompletionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/chat/complete",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Chat Stream
   * Create a streaming chat completion using Server-Sent Events.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static chatStream(
    data: ChatChatStreamData,
  ): CancelablePromise<ChatChatStreamResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/chat/stream",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class CodeBlocksService {
  /**
   * Create New Code Block
   * Create new code block.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CodeBlockPublic Successful Response
   * @throws ApiError
   */
  public static createNewCodeBlock(
    data: CodeBlocksCreateNewCodeBlockData,
  ): CancelablePromise<CodeBlocksCreateNewCodeBlockResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/code-blocks/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Code Blocks
   * Retrieve code blocks for the current user.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.skip
   * @param data.limit
   * @returns CodeBlocksPublic Successful Response
   * @throws ApiError
   */
  public static readCodeBlocks(
    data: CodeBlocksReadCodeBlocksData = {},
  ): CancelablePromise<CodeBlocksReadCodeBlocksResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/code-blocks/",
      query: {
        conversation_id: data.conversationId,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search User Code Blocks
   * Search code blocks with filters.
   * @param data The data for the request.
   * @param data.q Search query
   * @param data.language Filter by language
   * @param data.tags Filter by tags
   * @param data.skip
   * @param data.limit
   * @returns CodeBlocksPublic Successful Response
   * @throws ApiError
   */
  public static searchUserCodeBlocks(
    data: CodeBlocksSearchUserCodeBlocksData = {},
  ): CancelablePromise<CodeBlocksSearchUserCodeBlocksResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/code-blocks/search",
      query: {
        q: data.q,
        language: data.language,
        tags: data.tags,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Conversation Code Blocks
   * Get all code blocks for a specific conversation.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns CodeBlocksPublic Successful Response
   * @throws ApiError
   */
  public static readConversationCodeBlocks(
    data: CodeBlocksReadConversationCodeBlocksData,
  ): CancelablePromise<CodeBlocksReadConversationCodeBlocksResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/code-blocks/conversation/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Code Block
   * Get specific code block by ID.
   * @param data The data for the request.
   * @param data.codeBlockId
   * @returns CodeBlockPublic Successful Response
   * @throws ApiError
   */
  public static readCodeBlock(
    data: CodeBlocksReadCodeBlockData,
  ): CancelablePromise<CodeBlocksReadCodeBlockResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/code-blocks/{code_block_id}",
      path: {
        code_block_id: data.codeBlockId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Existing Code Block
   * Update a code block.
   * @param data The data for the request.
   * @param data.codeBlockId
   * @param data.requestBody
   * @returns CodeBlockPublic Successful Response
   * @throws ApiError
   */
  public static updateExistingCodeBlock(
    data: CodeBlocksUpdateExistingCodeBlockData,
  ): CancelablePromise<CodeBlocksUpdateExistingCodeBlockResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/code-blocks/{code_block_id}",
      path: {
        code_block_id: data.codeBlockId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Existing Code Block
   * Delete a code block.
   * @param data The data for the request.
   * @param data.codeBlockId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteExistingCodeBlock(
    data: CodeBlocksDeleteExistingCodeBlockData,
  ): CancelablePromise<CodeBlocksDeleteExistingCodeBlockResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/code-blocks/{code_block_id}",
      path: {
        code_block_id: data.codeBlockId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ConversationsService {
  /**
   * Create New Conversation
   * Create new conversation for the current user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public static createNewConversation(
    data: ConversationsCreateNewConversationData,
  ): CancelablePromise<ConversationsCreateNewConversationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/conversations/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Conversations
   * Retrieve conversations for the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ConversationsPublic Successful Response
   * @throws ApiError
   */
  public static readConversations(
    data: ConversationsReadConversationsData = {},
  ): CancelablePromise<ConversationsReadConversationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Conversation
   * Get specific conversation by ID.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public static readConversation(
    data: ConversationsReadConversationData,
  ): CancelablePromise<ConversationsReadConversationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Existing Conversation
   * Update a conversation.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.requestBody
   * @returns ConversationPublic Successful Response
   * @throws ApiError
   */
  public static updateExistingConversation(
    data: ConversationsUpdateExistingConversationData,
  ): CancelablePromise<ConversationsUpdateExistingConversationResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/conversations/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Existing Conversation
   * Delete a conversation and all related data.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteExistingConversation(
    data: ConversationsDeleteExistingConversationData,
  ): CancelablePromise<ConversationsDeleteExistingConversationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/conversations/{conversation_id}",
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class FilesService {
  /**
   * Upload File
   * Upload a file (CSV or other).
   * @param data The data for the request.
   * @param data.formData
   * @returns FilePublic Successful Response
   * @throws ApiError
   */
  public static uploadFile(
    data: FilesUploadFileData,
  ): CancelablePromise<FilesUploadFileResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/files/upload",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Files
   * Retrieve all files for the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns FilesPublic Successful Response
   * @throws ApiError
   */
  public static readFiles(
    data: FilesReadFilesData = {},
  ): CancelablePromise<FilesReadFilesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/files/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read File
   * Get specific file metadata by ID.
   * @param data The data for the request.
   * @param data.fileId
   * @returns FilePublic Successful Response
   * @throws ApiError
   */
  public static readFile(
    data: FilesReadFileData,
  ): CancelablePromise<FilesReadFileResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/files/{file_id}",
      path: {
        file_id: data.fileId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Uploaded File
   * Delete a file and its data.
   * @param data The data for the request.
   * @param data.fileId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteUploadedFile(
    data: FilesDeleteUploadedFileData,
  ): CancelablePromise<FilesDeleteUploadedFileResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/files/{file_id}",
      path: {
        file_id: data.fileId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read File Content
   * Get file content (for CSV files, returns parsed data).
   * @param data The data for the request.
   * @param data.fileId
   * @param data.maxRows
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static readFileContent(
    data: FilesReadFileContentData,
  ): CancelablePromise<FilesReadFileContentResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/files/{file_id}/content",
      path: {
        file_id: data.fileId,
      },
      query: {
        max_rows: data.maxRows,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns AuthMessage Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthMessage Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MessagesService {
  /**
   * Create New Message
   * Create new message in a conversation.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.requestBody
   * @returns MessagePublic Successful Response
   * @throws ApiError
   */
  public static createNewMessage(
    data: MessagesCreateNewMessageData,
  ): CancelablePromise<MessagesCreateNewMessageResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/conversations/{conversation_id}/messages/",
      path: {
        conversation_id: data.conversationId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Messages
   * Retrieve all messages for a conversation.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.skip
   * @param data.limit
   * @returns MessagesPublic Successful Response
   * @throws ApiError
   */
  public static readMessages(
    data: MessagesReadMessagesData,
  ): CancelablePromise<MessagesReadMessagesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/conversations/{conversation_id}/messages/",
      path: {
        conversation_id: data.conversationId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Existing Message
   * Delete a message from a conversation.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.messageId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteExistingMessage(
    data: MessagesDeleteExistingMessageData,
  ): CancelablePromise<MessagesDeleteExistingMessageResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/conversations/{conversation_id}/messages/{message_id}",
      path: {
        conversation_id: data.conversationId,
        message_id: data.messageId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SettingsService {
  /**
   * Set Api Key
   * Set and validate an API key for a provider.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns APIKeyResponse Successful Response
   * @throws ApiError
   */
  public static setApiKey(
    data: SettingsSetApiKeyData,
  ): CancelablePromise<SettingsSetApiKeyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/settings/api-keys",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Api Keys Status
   * Get status of configured API keys (without revealing the keys).
   * @returns APIKeysStatus Successful Response
   * @throws ApiError
   */
  public static getApiKeysStatus(): CancelablePromise<SettingsGetApiKeysStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/settings/api-keys/status",
    })
  }

  /**
   * Delete Api Key
   * Delete an API key for a provider.
   * @param data The data for the request.
   * @param data.provider
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteApiKey(
    data: SettingsDeleteApiKeyData,
  ): CancelablePromise<SettingsDeleteApiKeyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/settings/api-keys/{provider}",
      path: {
        provider: data.provider,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Api Usage
   * Get API usage statistics for the current user.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getApiUsage(): CancelablePromise<SettingsGetApiUsageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/settings/api-usage",
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns AuthMessage Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthMessage Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns AuthMessage Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns AuthMessage Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
